- Class: meta
  Course: RonR Fourth Seminar
  Lesson: Base Graphics
  Author: John Palmer
  Type: Standard
  Organization: UPF
  Version: 2.4.1

- Class: text
  Output: Welcome to Lesson 2, Taking Control of R's Base Graphics. In this lesson we will learn how to move statistical graphics from your mind to code using R's base graphical facilities. 

- Class: figure
  Output: Let's start by making a simple plot of the first set in Anscombe's quartet. The plot on the left is something you should have already seen in the previous lesson. It is generated simply by plot(y~x, AQ[[1]]). What is it missing? What would you like to add to it?
  Figure: simple_scatter.r
  FigureType: new

- Class: figure
  Output: "A main title can be added with with 'main' option: plot(y~x, AQ[[1]], main='Anscombe 1')." 
  Figure: simple_scatter_title.r
  FigureType: new

- Class: figure
  Output: "Axis labels can be changed with the 'xlab' and 'ylab' option: plot(y~x, AQ[[1]], main='Anscombe 1', xlab='Weight (g)', ylab='Height (m)')." 
  Figure: simple_scatter_title_labs.r
  FigureType: new

- Class: figure
  Output: "Want Greek? Use the 'expression' function: plot(y~x, AQ[[1]], main='Anscombe 1', xlab=expression(alpha), ylab=expression(beta))." 
  Figure: simple_scatter_title_labs_greek.r
  FigureType: new

- Class: figure
  Output: "Want to rotate the axis labels? Use the 'las' option: plot(y~x, AQ[[1]], main='Anscombe 1', xlab=expression(alpha), ylab=expression(beta), las=1)." 
  Figure: simple_scatter_title_labs_greek_las.r
  FigureType: new

- Class: figure
  Output: "For greater customization of the axes, take the out of the initial plot call and specify them separately: plot(y~x, AQ[[1]], ann=F, axes=F)." 
  Figure: simple_scatter_no_axes.r
  FigureType: new

- Class: figure
  Output: "Add an axis separately with axis: axis(1, las=3)." 
  Figure: simple_scatter_axis.r
  FigureType: add

- Class: figure
  Output: "Add an axis separately with axis: axis(1, las=3)." 
  Figure: simple_scatter_axis.r
  FigureType: add

- Class: text
  Output: "Certain graphical parameters need to be set separately, prior to calling plot (or adding an annotation to which you want the parameters to apply). These are set using the 'par' function. For example, plot margins can be changed by calling par(mar=c(0,0,0,0)) before calling plot. It is often smart to save the initial parameters as a variable first: old_par = par(). You can then restore them with par(old_par)." 

- Class: figure
  Output: "You can change the border drawn around your plot using the 'bty' option. Choose from 'o' (the default), 'l', '7', 'c', 'u', or ']'. For example: plot(y~x, AQ[[1]], main='Anscombe 1', xlab='Weight (g)', ylab='Height (m)', bty='u')" 
  Figure: simple_scatter_title_labs_box.r
  FigureType: add

- Class: text
  Output: "Background color can be set for the entire plot using the 'bg' tag within 'par'. Sometimes one wants to change just the background color of the plot area. This must be done by adding a rectangle that draws on the current dimensions: rect(par('usr')[1], par('usr')[3], par('usr')[2], par('usr')[4], col = 'color')." 

- Class: text
  Output: "The basic plot types are points, lines, and histograms, which can be set in the plot call itself (p, l, h -- with other possibilities as well). For point, you will want to pick a point style using pch, size using cex, and color using col and/or bg. For lines, line style is set with lty, width with lwd, and color using col." 



