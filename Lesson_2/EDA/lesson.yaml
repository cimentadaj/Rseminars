- Class: meta
  Course: RonR_Third_Seminar
  Lesson: Exploratory Data Analysis
  Author: Jorge Cimentada
  Type: Standard
  Organization: RECSM
  Version: 2.4.3

- Class: text
  Output: Hi and welcome to the final swirl lesson! This will be a challenge lesson where we attempt
    do some exploratory data analysis using the concepts we've touched upon until now.
    
- Class: text
  Output: Note that you'll need internet to complete this exercise!

- Class: text
  Output: Let's begin with the data. I've grabbed some data from the World Value Survey (WVS) where we will
    explore whether the population in countries like Norway, Sweden, Australia and US is very religious,
    and how does that differ by gender, education and age.
  
- Class: text
  Output: First thing's first. We have to open the data and look how to read it. If you have internet, 
    follow this link to check both datasets https://github.com/cimentadaj/Rseminars/tree/active_development/Lesson_2/EDA/data

- Class: cmd_question
  Output: If you don't have internet, the data should be in the folder in the data_paths vector. Type it.
  CorrectAnswer: data_paths
  AnswerTests: omnitest(correctExpr='data_paths')
  Hint: Type data_paths

- Class: mult_question
  Output: After visually inspecting the data, which functions do we need to open wvs and wvs_semi_colon
    respectively? Don't close the files just yet, because we'll need to look at them again.
  AnswerChoices: write.delim(sep = ",") and read.csv(); write.table() and read.csv2(); read.table() and read.csv2(); read.csv2() and read.csv()
  CorrectAnswer: read.table() and read.csv2()
  AnswerTests: omnitest(correctVal= 'read.table() and read.csv2()')
  Hint: Look at the separator of each file. The first one is a space and the second one is a semi-colon,
    both the default separators of read.table() and read.csv2()

- Class: text
  Output: So, the whole idea is to get a feel of the data before we read it. What's the separator of each
    cell? Is the first row the column names? Are column names complete? These are things you should be
    looking for when reading in data.

- Class: text
  Output: Let's begin by reading wsv. We know we have to use read.table() but we have to specify
    some other things. For example, the last column name is missing, and there's only 3 column
    names (including the missing column) for 4 columns. We have to specify that!

- Class: cmd_question
  Output: Okay, so using the wvs_url vector (contains the url to the first data), read the
    data using read.table(). Remember to specify the first row as header and assign the data
    the name 'wvs'.
  CorrectAnswer: wvs <- read.table(wvs_url, header = T)
  AnswerTests: any_of_exprs('wvs <- read.table(wvs_url, header = T)', 'wvs <- read.table(wvs_url, header = TRUE)')
  Hint: Ok, two hints. The structure should be something along the lines of new_name <- read_function(url, arguments).
    If you don't remember which arguments to use, type ?read.table().
    
- Class: cmd_question
  Output: Check the first few rows of wvs with head()
  CorrectAnswer: head(wvs)
  AnswerTests: omnitest(correctExpr='head(wvs)')
  Hint: Type head(wvs)
    

- Class: cmd_question
  Output: Oh, looks like one column name is missing. We could change the name when reading the data.
    So repeat the expression we used to read the data and add the 'col.names' argument. For this argument
    specify all column names, plus a new name 'wdk' as a character vector.
  CorrectAnswer: wvs <- read.table(wvs_url, header = T, col.names = c("pov", "which_relig", "wdk"))
  AnswerTests: any_of_exprs('wvs <- read.table(wvs_url, header = T, col.names = c("pov", "which_relig", "wdk"))', 'wvs <- read.table(wvs_url, header = TRUE, col.names = c("pov", "which_relig", "wdk"))')
  Hint: The structure should be something along the lines of new_name <- read_function(url, arguments).
    Finally, the column names should be c(col1_name, ..., "wdk") replacing the
    corresponding variable names!
    
- Class: cmd_question
  Output: Type head(wvs)
  CorrectAnswer: head(wvs)
  AnswerTests: omnitest(correctExpr='head(wvs)')
  Hint: Type head(wvs)

- Class: text
  Output: Awesome! We have one dataset down. We need to repeat something similar with the wsv_semi_colon.

- Class: cmd_question
  Output: But this one you'll do it on your own! I'll give you some hints. To begin, first column
    is the row names, so ignore that! There's only 5 columns. The vector of names is
    c("degree", "country", "age", "wdk", "index"). Everything should be very similar to the last
    expression but with read.csv2(). Use the wvs2_url for the link and name it wvs_two.
  CorrectAnswer: wvs_two <- read.csv2(wvs2_url, header = T, col.names = c("degree", "country", "age", "wdk", "index"))
  AnswerTests: calculates_same_value('wvs_two <- read.csv2(wvs2_url, header = T, col.names = c("degree", "country", "age", "wdk", "index"))')
  Hint: Using read.csv2(), what's important here are the header argument and the col.names argument.
    The col.names argument should be a character vector with all column names in the original data +
    "wdk" and "index".

- Class: cmd_question
  Output: Don't worry if you get a lot of warning messages! Let's check if the data makes sense
    by typing head(wvs_two)
  CorrectAnswer: head(wvs_two)
  AnswerTests: omnitest(correctExpr='head(wvs_two)')
  Hint: Type head(wvs_two).

- Class: text
  Output: Good job!, now we have our two datasets imported.
  
- Class: mult_question
  Output: These datasets are supposed to be merged, so let's do that. Can you tell me
    which variable to merge by?
  AnswerChoices: pov and degree; country and which_relig; wdk and wdk; index and wdk; degree and index;
  CorrectAnswer: index and wdk
  AnswerTests: omnitest(correctVal= 'index and wdk')
  Hint: Which variable is present in both datasets (although with different names?)

- Class: cmd_question
  Output: Awesome, index is the key variable here. Well, now that you've got it, using the merge()
    function, merge both datasets by the 'index' and 'wdk' variables and call that 'wvs_full'. Note
    that they are the same variables but named differently. Check ?merge for 'by.x' and 'by.y' argumnets.
  CorrectAnswer: wvs_full <- merge(wvs, wvs_two, by.x = "wdk", by.y = "index")
  AnswerTests: omnitest(correctExpr = 'wvs_full <- merge(wvs, wvs_two, by.x = "wdk", by.y = "index")')
  Hint: You'll need to use additional argument and pay attention to the order of the arguments. For example,
    new_name <- merge(wvs, wvs_two, by.x = "wdk", by.y = "index"). But check that 'wdk' is the variable in 'x'
    and so on and so forth.

- Class: cmd_question
  Output: Awesome! Take a look at 'wvs_full' with head().
  CorrectAnswer: head(wvs_full)
  AnswerTests: omnitest(correctExpr='head(wvs_full)')
  Hint: head(wvs_full)

- Class: text
  Output: We need to change those column names and we'll be ready. The 'names()' function
    allows you to see the names of a data frame but also change them. For example,
    names(fake_data) <- c("col_1", "col_2") changes the first two column names in that order.
    By default, because we didn't specify any third, fourth, column names, they get an NA value.
    But names(fake_data)[c(1, 3)] <- c("col_1", "col_2") changes the first and third column
    names only.

- Class: cmd_question
  Output: Go up two questions to see the contents of wvs_full. Change the column names of the index
    variables 'wdk' to 'index', 'which_relig' to 'relig' and 'wdk' to 'gender'.
  CorrectAnswer: names(wvs_full)[c(1, 3, 7)] <- c("index", "relig", "gender")
  AnswerTests: omnitest(correctExpr='names(wvs_full)[c(1, 3, 7)] <- c("index", "relig", "gender")')
  Hint: The position we need to change are 1, 3 and 7. Change names(data)[c(1, 3, 7)] to the
    variable names outlined above.

- Class: cmd_question
  Output: Chech the first few rows of 'wvs_full'.
  CorrectAnswer: head(wvs_full)
  AnswerTests: omnitest(correctExpr='head(wvs_full)')
  Hint: Type head(wvs_full)
  
- Class: cmd_question
  Output: We're all set! Let's explore this data. relig is for whether the person
    belongs to a religion or not. What's the frequency of this variable? (Use table)
  CorrectAnswer: table(wvs_full$relig)
  AnswerTests: omnitest(correctExpr='table(wvs_full$relig)')
  Hint: Include wvs_full$relig in table()
  
- Class: cmd_question
  Output: Okay, the vast majority belongs to a religion. But wait, no missing values in this question?
    That's strange. Some people probably didn't want to answer. Add useNA = "always"" as an argument
    to the previous expression. But, this time save the results with the name our_table and
    wrap the whole expression with parenthesis ().
  CorrectAnswer: (our_table <- table(wvs_full$relig, useNA = 'always'))
  AnswerTests: omnitest(correctExpr='(our_table <- table(wvs_full$relig, useNA = "always"))')
  Hint: Add useNA = "always"" to an expression like this one (new_name <- table(var, useNA = "always""))
  
- Class: text
  Output: That makes sense now. But we wanna look at percentages! Not raw numbers. Right?
    
- Class: cmd_question
  Output: Getting percentage is a bit tricky, though. We have to wrap the whole table in the
    prop.table() function. But we can calculate it ourselves, right? Percentages is only every
    number of the table divided by the sum of all numbers! Do it yourself and don't assign any
    name to anything (remember to use '/' to divide and sum() to sum the table)
  CorrectAnswer: our_table / sum(our_table)
  AnswerTests: omnitest(correctExpr='our_table / sum(our_table)')
  Hint: Divided our_table by the sum() of our_table!
  
- Class: text
  Output: Good job! This is the type of creativity we need to foster in data analysis, if there's no
    answer to your problem (or it's too complicated), you create your own answer!
    
- Class: text
  Output: Okay, it looks like 77% of the population of all these countries combined
    belong to a particular religion. Does this differ by education? Let's explore it.

- Class: cmd_question
  Output: Calculate the frequency table not only for 'relig' but include the 'degree' variable.
    Remember to set 'useNA' to 'always'. Save it as our_table2 and wrap the whole expression in
    parenthesis ().
  CorrectAnswer: (our_table2 <- table(wvs_full$relig, wvs_full$degree, useNA = 'always'))
  AnswerTests: omnitest(correctExpr="(our_table2 <- table(wvs_full$relig, wvs_full$degree, useNA = 'always'))")
  Hint: "This skeleton should help you out: (new_name <- table(wvs_full$var_1, wvs_full$var_2, useNA = 'always'))"
    
- Class: text
  Output: So, people who don't have a degree are disproportionately more likely to be religious.
    This obviously depeneds on a lot of things. One of it is that this relationship changes with
    your age, and obviously by country. People in Sweden might be generally less religious than
    in the United States.
    
- Class: cmd_question
  Output: Let's turn the age variable into equal age groups. We do that with cut().
    Create the variable age_group within wvs_full and cut() wvs_full$age into 
    6 age groups with the argument 'breaks' and set the dig.lab to 2.
  CorrectAnswer: wvs_full$age_group <- cut(wvs_full$age, breaks = 6, dig.lab = 2)
  AnswerTests: omnitest(correctExpr='wvs_full$age_group <- cut(wvs_full$age, breaks = 6, dig.lab = 2)')
  Hint: 'This skeleton should help you out: data$new_name <- cut(data$old_name, breaks = 6, dig.lab = 2)'
  
- Class: cmd_question
  Output: Check the frequency of each group with table().
  CorrectAnswer: table(wvs_full$age_group)
  AnswerTests: omnitest(correctExpr='table(wvs_full$age_group)')
  Hint: 'Include wvs_full$age_group inside table()'

- Class: text
  Output: We could calculate the share of each group by manually subsetting the groups manually.
    For example, with(wvs_full[wvs_full$age_group == "(18,30]", ], table(relig, degree)). Try to
    understand this code by yourself...
    
- Class: cmd_question
  Output: Can you repeat the previous here?
  CorrectAnswer: with(wvs_full[wvs_full$age_group == "(18,30]", ], table(relig, degree))
  AnswerTests: omnitest(correctExpr='with(wvs_full[wvs_full$age_group == "(18,30]", ], table(relig, degree))')
  Hint: Copy the previous code.

- Class: cmd_question
  Output: Repeat the previous but for the "55,67" group.
  CorrectAnswer: with(wvs_full[wvs_full$age_group == "(55,67]", ], table(relig, degree))
  AnswerTests: omnitest(correctExpr='with(wvs_full[wvs_full$age_group == "(55,67]", ], table(relig, degree))')
  Hint: Copy the previous code and update with new age group.
  
- Class: cmd_question
  Output: Repeat the previous but for the "67,80" group.
  CorrectAnswer: with(wvs_full[wvs_full$age_group == "(67,80]", ], table(relig, degree))
  AnswerTests: omnitest(correctExpr='with(wvs_full[wvs_full$age_group == "(67,80]", ], table(relig, degree))')
  Hint: Copy the previous code and update with new age group.

- Class: text
  Output: Notice the trend? These number don't help a lot, but if we looked at the percentages
    it looks like religion for non-degree holders increases with age. Interesting.
    
- Class: text
  Output: But that was a bit of a hassle, you know.. having to change groups to check each one!
    We could've done something much easier with functions like by() or split() and lapply() but
    these are more advanced. If you feel curious, feel free to check them out!
    
- Class: cmd_question
  Output: Check the frequency of the country variable
  CorrectAnswer: table(wvs_full$country)
  AnswerTests: omnitest(correctExpr='table(wvs_full$country)')
  Hint: Include wvs_full$country inside table()
  
- Class: mult_question
  Output: "Let's recode 'USA' to 'United States'. How would we do that? In words, we need
    to take wvs_full$country and subset where wvs_full$country == 'USA' and set that to be
    'United States'"
  AnswerChoices: wvs_full$country[country == "USA"] <- "United States"; wvs_full$country[wvs_full$country == "USA"] <- "United States"; wvs_full$country == 'USA' <- "United States"; wvs_full$country == 'USA' <- "United States"
  CorrectAnswer: wvs_full$country[wvs_full$country == "USA"] <- "United States"
  AnswerTests: omnitest(correctVal= 'wvs_full$country[wvs_full$country == "USA"] <- "United States"')
  Hint: Take country, then subset the positions where country equals 'USA' and assign "United States"

- Class: cmd_question
  Output: Okay, let's go step by step! First, type the logical statement to whether wvs_full$country
    equals "USA". Save as 'lgl' and wrap everything in parenthesis ().
  CorrectAnswer: (lgl <- wvs_full$country == "USA")
  AnswerTests: omnitest(correctExpr='(lgl <- wvs_full$country == "USA")')
  Hint: Type something like (new_name <- data$variable == 'string')
  
- Class: text
  Output: So each TRUE is actually one position where the logical statement is TRUE. So position 961
    contains the string 'USA' in the country variable. From here it's easy! What would be the result
    of wvs_full$country[lgl]?
    
- Class: cmd_question
  Output: Try it yourself
  CorrectAnswer: wvs_full$country[lgl]
  AnswerTests: omnitest(correctExpr='wvs_full$country[lgl]')
  Hint: Copy the code from the last question!
  
- Class: text
  Output: How can you tell whether this variable is a factor or a string?

- Class: cmd_question
  Output: This a problem! This is a factor, and we already looked at how to recode
    factors with the 'labels' argument. We want treat this as a character. Turn it
    into a character and save it again.
  CorrectAnswer: wvs_full$country <- as.character(wvs_full$country) 
  AnswerTests: omnitest(correctExpr='wvs_full$country <- as.character(wvs_full$country)')
  Hint: Use as.character() with wvs_full$country and assign the same name.
    
- Class: cmd_question
  Output: Ok, back to the recode. We literally only took the position where wvs_full$country is
    equal to "USA". To reassign it we add '<- "United States"' to the subset from the previous code.
    Do it!
  CorrectAnswer: wvs_full$country[lgl] <- "United States"
  AnswerTests: omnitest(correctExpr='wvs_full$country[lgl] <- "United States"')
  Hint: Add '<- "United States"' to wvs_full$country[lgl].

- Class: cmd_question
  Output: Check the frequency of the country variable now.
  CorrectAnswer: table(wvs_full$country)
  AnswerTests: omnitest(correctExpr='table(wvs_full$country)')
  Hint: Check the frequency of wvs_full$country with table()
  
- Class: cmd_question
  Output: Using with(), 'wvs_full' and the subsetting rules we used before,
    can you produce the frequency table of only "Sweden"? Think something like with(subsetted_data,
    prop.table(table(relig, degree)))
  CorrectAnswer: with(wvs_full[wvs_full$country == "Sweden", ], prop.table(table(relig, degree)))
  AnswerTests: omnitest(correctExpr='with(wvs_full[wvs_full$country == "Sweden", ], prop.table(table(relig, degree)))')
  Hint: This is a hard one! But think hard. data[data$subset_var == "string", ] will give you a data set for only
    when subset_var equals "string". Extrapolate the example to "Sweden" and the rest is the same!
    
- Class: cmd_question
  Output: Copy the previous to "United States" so we can compare!
  CorrectAnswer: with(wvs_full[wvs_full$country == "United States", ], prop.table(table(relig, degree)))
  AnswerTests: omnitest(correctExpr='with(wvs_full[wvs_full$country == "United States", ], prop.table(table(relig, degree)))')
  Hint: This is a hard one! But think hard. data[data$subset_var == "string", ] will give you a data set for only
    when subset_var equals "string". Extrapolate the example to "United States" and the rest is the same!

- Class: text
  Output: It looks like in the US there's about 15% which are not religious and don't have a university
    degree. Moreover, it looks like less degree-holders are religious in the US than in Sweden.
    
- Class: text
  Output: This was a good job! We did real data analysis today. We got a messy dataset and we made
    it suitable for analysis. I think you're well versed in basic R to start your own analysis.
    This can be frustrating, but don't give up, it's very rewarding!
