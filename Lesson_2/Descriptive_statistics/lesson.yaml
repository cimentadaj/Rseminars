- Class: meta
  Course: Lesson_2
  Lesson: Descriptive statistics
  Author: Jorge Cimentada from Daniel Cigandas material
  Type: Standard
  Organization: RECSM, UPF
  Version: 2.2.21

- Class: text
  Output: Hello and welcome to the third lesson of Lesson 2. On this lesson
        we will cover the basics of descriptive statistics, frequency tables and correlation,
        the main functions for Exploratory Data Analysis (EDA).
        
- Class: text
  Output: This lesson is not about statistics nor it will explain what each function does in detail.
    The purpose is to show you that R has these standard functions available and that you can use
    them whenever you want. In case you already know what they mean, then they will prove handy.
    
- Class: text
  Output: 'Note: You will need an internet connection for this lesson to work properly.'

- Class: video
  Output: First, let's read the data. Please, inspect the data.
  VideoLink: https://raw.githubusercontent.com/cimentadaj/Rseminars/master/Lesson_2/Descriptive_statistics/data/asfr1314ine.txt

- Class: cmd_question
  Output: I stored the dataset's url in a string vector called txt_file in your workspace.
    Read it and give it the name dati. Hint; while reading the data, change the four column
    names to c('age', 'X2014', 'X2013', "year_equal", "age_groups").
  CorrectAnswer: dati <- read.table(txt_file, header = T, col.names = c("age", "X2014", "X2013", "year_equal", "age_groups"), sep = " ")
  AnswerTests: omnitest(correctExpr=('dati <- read.table(txt_file, col.names = c("age", "X2014", "X2013", "year_equal", "age_groups"), sep = " ")'))
  Hint: If you looked at the table, there are 5 columns but only four column names (first column
    is actually the row.names, that's why you think there are 6). The answear is
    dati <- read.table(txt_file, col.names = c("age", "X2014", "X2013", "year_equal", "age_groups"), sep = " ")
  
- Class: cmd_question
  Output: Have a look at the first few rows of dati.
  CorrectAnswer: head(dati)
  AnswerTests: omnitest(correctExpr='head(dati)')
  Hint: Type head(dati)
  
- Class: cmd_question
  Output: Now let's have a look at the 'tail' of the dataset. Try it
  CorrectAnswer: tail(dati)
  AnswerTests: omnitest(correctExpr='tail(dati)')
  Hint: Type tail(dati)
  
- Class: cmd_question
  Output: Use dim() with dati.
  CorrectAnswer: dim(dati)
  AnswerTests: omnitest(correctExpr='dim(dati)')
  Hint: Type dim(dati)

- Class: mult_question
  Output: What's the oldest age in the dataset?
  AnswerChoices: 33; 35; 42; 44; 40; We don't have that information
  CorrectAnswer: We don't have that information
  AnswerTests: omnitest(correctVal= "We don't have that information")

- Class: text
  Output: Gotcha there! The age variable is a mistake! It's actually the index variable
    which got confused as the age variable. How could you tell? Well the first age is age 1.
    Which child at age 1 has a fertility rate of 2 and 3 children per year? We have to create
    a new age variable.
    
- Class: cmd_question
  Output: Create a new variable called age which is a seq() from 15 to 49.
  CorrectAnswer: dati$age <- seq(15, 49)
  AnswerTests: omnitest(correctExpr='dati$age <- seq(15, 49)')
  Hint: Type dati$age <- seq(15, 49)
  
- Class: text
  Output: It's always a good habit to inspect your dataset. You should do this specially
    after reading it just to check that it was read correctly!
        
- Class: text
  Output: R has some standard functions to calculate descriptive statistics. To name a few, mean is
        mean(), the standard deviation is sd(), the variance is var() and the median is median().

- Class: mult_question
  Output: Let's calculate some means! If I typed mean(dati), what would I get?
  AnswerChoices: The mean of dati; The mean of X2014 and X2013; An error;
  CorrectAnswer: An error
  AnswerTests: omnitest(correctVal= 'An error')
  
- Class: cmd_question
  Output: Alright, that was a trick question. Remember that dati is a data frame! It contains several columns
        and many rows. Can you calculate the mean of a data frame? The correct expression
        would be to calculate the mean of, for example, X2014 using the $ operator from the data frame dati. Try it
        yourself.
  CorrectAnswer: mean(dati$X2014)
  AnswerTests: omnitest(correctExpr='mean(dati$X2014)')
  Hint: dati$X2014 is the variable maxgrip, so simply type mean(dati$maxgrip)
  
- Class: text
  Output: Almost all of these summary functions have the argument 'na.rm'. By default, it it set
    to FALSE. That means that if your variable has NA's, mean() or any other function will return
    an NA.
    
- Class: cmd_question
  Output: For example, mean(c(1, 5, 7, 3, NA)) will return an NA. Rewrite the same expression
    so that the output doesn't return an NA.
  CorrectAnswer: mean(c(1, 5, 7, 3, NA), na.rm = T)
  AnswerTests: omnitest(correctExpr='mean(c(1, 5, 7, 3, NA), na.rm = T)')
  Hint: Leave the vector as it is, simply add the na.rm = T argument to the mean() function.


- Class: cmd_question
  Output: Using the sd() function calculate the standard deviation of X2013
  CorrectAnswer: sd(dati$X2013)
  AnswerTests: omnitest(correctExpr='sd(dati$X2013)')
  Hint: Include the variable dati$X2013 inside sd().
  
- Class: cmd_question
  Output: Do exactly the same with var() function to calculate the variance of X2013.
  CorrectAnswer: var(dati$X2013)
  AnswerTests: omnitest(correctExpr='var(dati$X2013)')
  Hint: Include the variable dati$X2013 inside var().
  
- Class: cmd_question
  Output: Suppose we want to compare the result of the mean() function with the median() function.
    Calculate the median() of X2013.
  CorrectAnswer: median(dati$X2013)
  AnswerTests: omnitest(correctExpr='median(dati$X2013)')
  Hint: Type median(dati$X2013)
  
- Class: cmd_question
  Output: What about quantiles? They're pretty easy to get with the quantile() function.
    Without me explaining it, try to use the quantile() function on our X2013 variable.
  CorrectAnswer: quantile(dati$X2013)
  AnswerTests: omnitest(correctExpr='quantile(dati$X2013)')
  Hint: Type quantile(dati$X2013)
  
- Class: text
  Output: That's nice! But what if we wanted a specific quantile? Then we specify it as a
    second argument like here quantile(dati$X2013, 0.65). That would give us the value
    of the 65th quantile.

- Class: text
  Output: Okay, all those summary statistics are great, but we need to take advantage of the
    power of R. Your task is to create a named vector that contains the mean,
    median and sd.
    
- Class: cmd_question
  Output: For the dati$X2014 variable, create a named vector that contains the mean, median
    and sd. Because we will repeat the 'dati' name several times, use with() at the beginning.
  CorrectAnswer: with(dati, c(mean = mean(X2014), median = median(X2014), sd = sd(X2014)))
  AnswerTests: omnitest(correctExpr='with(dati, c(mean = mean(X2014), median = median(X2014), sd = sd(X2014)))')
  Hint: Create a named vector like this one ... with(dati, c(mean = mean(X2014)...))
  
- Class: cmd_question
  Output: You could add as many summary statistics as you'd like and your own customized
    summary. However, smart people already though of that. Use the summary()
    function on the X2014 variable.
  CorrectAnswer: summary(dati$X2014)
  AnswerTests: omnitest(correctExpr='summary(dati$X2014)')
  Hint: Include dati$X2014 inside summary().

- Class: text
  Output: Great work! Let's move into tables.

- Class: cmd_question
  Output: R has the table() function. It has as many arguments as you want to specify.
    Let's imagine we want to see the frequency of people in different age_groups.
    Using table(), do that for age_groups.
  CorrectAnswer: table(dati$age_groups)
  AnswerTests: omnitest(correctExpr='table(dati$age_groups)')
  Hint: Type table(dati$age_groups)
  
- Class: cmd_question
  Output: Let's look at whether fertility in 2013 is the same in 2014 for different age groups.
    Take the last table, add a comma, and add the year_equal variable. This time
    save the table to an object named ourtable using the <- operator and wrap everything in
    parenthesis like this (random_vec <- expression_here)
  CorrectAnswer: (ourtable <- table(dati$age_groups, dati$year_equal))
  AnswerTests: omnitest(correctExpr='(ourtable <- table(dati$age_groups, dati$year_equal))')
  Hint: Type (name <- table(var1, var2, ...)). This will give you a two
    way table.
    
- Class: text
  Output: It looks like younger and older ages had the same fertility levels
    but those between 26 and 40 indeed had fertility changes!

- Class: text
  Output: When we assign (<-) an object, R doesn't print the contents be default. However,
    if we wrap the expression in (), then it prints it.
    
- Class: text
  Output: Using table(), we can add as many other variables
    as you want by simply putting a comma and adding another variable. You could create
    3, 4, 5 way tables if you want.

- Class: cmd_question
  Output: We can use the prop.table() function to get percentages instead of numbers. Using
    prop.table(), include ourtable as the first argument, and set the margin argument to 1.
    The margin argument controls whether we want percentages to sum to 100% row-wise(= 1) or
    column-wise(= 2).
  CorrectAnswer: prop.table(x=ourtable,margin=1)
  AnswerTests: omnitest(correctExpr='prop.table(x=ourtable,margin=1)')
  Hint: Inside prop.table(), x should equal ourtable and margin should equal 1
  
- Class: text
  Output: You could get the column percentages by changing the 1 for a 2 in the margin argument.

- Class: text
  Output: You will often want to create categorical variables from continuous measures. 
    The cut() function cuts a continuous variable into a desired number groups.
    
- Class: cmd_question
  Output: Let's see an example. We have our age variable which is a continuous variable. What's
    the range() of this variable?
  CorrectAnswer: range(dati$age)
  AnswerTests: omnitest(correctExpr='range(dati$age)')
  Hint: Include dati$age inside range()
  
- Class: cmd_question
  Output: Check the frequency of the age variable.
  CorrectAnswer: table(dati$age)
  AnswerTests: omnitest(correctExpr='table(dati$age)')
  Hint: Include dati$age inside table()
  
- Class: text
  Output: That's neither a nice output nor an informative table. Let's make it better with
    the cut function. age ranges from 15 to 40, so let's cut it in groups of 2. So the amount of
    people between 15-17, 17-19, and so on...

- Class: text
  Output: Let's read the expression before seeing it. we want R to cut dati$age from 15
    to 40 into groups of 2. As an additional argument, we want R to include 15, which is the LOWEST
    number in our numeric variable.
    
- Class: cmd_question
  Output: Include age as the first argument of cut(). The breaks argument sets the places where
    cut() will cut the group. We can then include seq(15, 40, 2) as the argument of breaks. Have
    a look at ?cut to see how the 'include.lowest' argument works and specify it. Before finishing,
    add this expression as a variable to 'dati' with the name 'agegroups_two'.
  CorrectAnswer: dati$agegroups_two <- cut(dati$age, breaks=seq(15, 40, by= 2),include.lowest=TRUE)
  AnswerTests: omnitest(correctExpr='dati$agegroups_two <- cut(dati$age, breaks=seq(15, 40, by= 2),include.lowest=TRUE)')
  Hint: Ok, that might've been hard. Follow this skeleton and try to make sense of it. dati$new_var
    <- cut(dati$old_var, breaks = sequence of cuts, include.lowest = TRUE). If you don't understand it,
    checkout ?cut, reread the previous question and experiment by yourself with play().
  
- Class: cmd_question
  Output: The remaining part is easy, write down table() and include our new variable.
  CorrectAnswer: table(dati$agegroups_two)
  AnswerTests: omnitest(correctExpr='table(dati$agegroups_two)')
  Hint: Type table(dati$agegroups_two)
        
- Class: cmd_question
  Output: Cool, eh? Finally, for those of you which use correlation, the function is cor(). Want to
    calculate the correlation between dati$X2013 and dati$X2014? Use with() and cor() to calculate
    the correlation betwen X2013 and X2014
  CorrectAnswer: with(dati, cor(X2013, X2014))
  AnswerTests: omnitest(correctExpr='with(dati, cor(X2013, X2014))')
  Hint: Type with(a_dataset, cor(var1, var2))

- Class: text
  Output: These are some very basic functions in R. Don't try to memorize them, instead,
    open a dataset of interest and start playing around with these functions, even if you have to
    look them up! Good job.
