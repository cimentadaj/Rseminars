- Class: meta
  Course: RonR! Second seminar
  Lesson: Matrices and Lists
  Author: Jorge Cimentada
  Type: Standard
  Organization: RECSM UPF
  Version: 2.2.21

- Class: text
  Output: Hello! Welcome to our lesson on matrices and lists. Matrices are widely used in mathematics and
    algebra and are really useful in computer science. In this lesson we'll learn how to use matrices
    in R and how characteristics they have.
    
- Class: text
  Output: First off, what is a matrix? A matrix is simply a rectangular shaped data set usually
    filled with numbers. So, if you've used Excel or any other spreadsheet program you are in fact
    dealing with matrix-like objects, although you don't name them like that.
  
- Class: cmd_question
  Output: A matrix is a "dataset" with "n" number of rows and "n" number of columns. I've taken the
    liberty of creating a matrix so you can check it our for yourself. Type ourmatrix.
  CorrectAnswer: ourmatrix
  AnswerTests: omnitest(correctExpr='ourmatrix')
  Hint: Type ourmatrix
  
- Class: cmd_question
  Output: See? There's no need to feel intimidated by matrices. They’re simply a "dataset". Here, this
    matrix has 3 rows and 3 columns. How do we create matrices? Well there's the function "matrix()".
    Type ?matrix() and have a look at the description to your right to see if you understand how it works.
  CorrectAnswer: ?matrix()
  AnswerTests: omnitest(correctExpr='?matrix()')
  Hint: Type ?matrix()
  
- Class: text
  Output: C'mon, have a look! :)
  
- Class: text
  Output: 'Here is how it works: matrix(data,nrow,ncol). The matrix you saw earlier was created with
    this expression: matrix(1:9, nrow = 3, ncol = 3). In this case, the first argument means from the number
    1 to the number 9, distributed in 3 rows and 3 columns (since you’ve already seen generating sequences
    you should have an idea about this).'
  
- Class: cmd_question
  Output: Now it’s your turn. Create a matrix that contains from the numbers 1 to 12, distributed in 4
    rows and 3 columns.
  CorrectAnswer: matrix(1:12, nrow = 4, ncol = 3)
  AnswerTests: any_of_exprs('matrix(1:12, nrow = 4,ncol = 3)', 'matrix(1:12, 4, 3)')
  Hint: 'Remember that matrix syntax: matrix(vector, number of rows, number of columns)'
  
- Class: cmd_question
  Output: Matrices not only accept numeric vectors but also logical or character vectors.
    As we saw in the past lessons, you can create a vector with the c() function. Try to create a matrix
    which contains a logical vector of length 4 where the first two observations are TRUE and the
    remaining two are FALSE. In addition, the matrix should have two rows and two columns.
  CorrectAnswer: matrix(c(TRUE,TRUE,FALSE,FALSE),2, 2)
  AnswerTests: any_of_exprs("matrix(c(TRUE, TRUE, FALSE, FALSE),2 ,2)", "matrix(c(T, T, F, F),2, 2)")
  Hint: 'If the matrix needs to have a logical vector of length 4 that contains two TRUEs and two FALSEs,
    then the vector would look like this: c(TRUE,TRUE,FALSE,FALSE). Add that to your matrix and specify
    the number of rows and columns.'
  
- Class: text
  Output: Now that you've understood how to create matrices, it’s important to know how to subset matrices.
    I can’t stress this enough but it’s really important that you understand this process clearly
    since it is the backbone of subsetting and filtering objects in R.
  
- Class: cmd_question
  Output: Let’s take as an example the existing matrix called "ourmatrix". Type ourmatrix again.
  CorrectAnswer: ourmatrix
  AnswerTests: omnitest(correctExpr= "ourmatrix")
  Hint: Type ourmatrix
  
- Class: text
  Output: As you can see, each row and column has a number assigned. So the 1st column has a number 1,
    the 2nd a number 2, and so on. The same pattern is visible for rows. But if you have closer look,
    the name of the 1st column is [, 1], the name of the 2nd column is [, 2] and the name of the 3rd
    column is [, 3]. For rows it is exactly the same but with the number BEFORE the comma(so [1,],
    [2,] and [3,]).
    
- Class: text
  Output: By default, whenever you don't specify any row/column numbers, R subsets all rows/columns.
    For example, ourmatrix[, 3] will return all rows (because none were specified) for the third
    column. Conversely, ourmatrix[1, ] will return the first row for all columns (because no columns
    were specified). Lastly, ourmatrix[2, 2:3] will return the second row for the second and third
    column.
    
- Class: cmd_question
  Output: That is how subsetting works. The number before the comma represent the row number and
    after the comma the column number. Using ourmatrix, subset the first column for all rows.
  CorrectAnswer: ourmatrix[,1]
  AnswerTests: omnitest(correctExpr= "ourmatrix[,1]")
  Hint: Type ourmatrix[,1]
  
- Class: cmd_question
  Output: Now, try subsetting all columns only for the 3rd row.
  CorrectAnswer: ourmatrix[3,]
  AnswerTests: omnitest(correctExpr= "ourmatrix[3,]")
  Hint: If ourmatrix[,1] isolates the 1st column, then isolating the 3rd row would be the same but with 3 before the comma.
  
- Class: cmd_question
  Output: What about subsetting the 3rd row, only for the 2nd column?
  CorrectAnswer: ourmatrix[3,2]
  AnswerTests: omnitest(correctExpr= "ourmatrix[3,2]")
  Hint: Well, that's easy! If outmatrix[3,] gives the 3rd row and ourmatrix[,2] the 2nd column, then combining
    both things will give the 3rd row for the 2nd column.
    
- Class: cmd_question
  Output: Let's suppose for a minute that ourmatrix is a dataset you collected where
    each row is a person you interviewed and each column is a question you asked them.
    Subset the the 1st and 3rd person only on their 2nd question and save it with the name my_matrix.
  CorrectAnswer: my_matrix <- ourmatrix[c(1,3),2]
  AnswerTests: omnitest(correctExpr="my_matrix <- ourmatrix[c(1,3),2]")
  Hint: Remember that c() wil concatenate any two numbers. To select the 1st and 3rd observation you need to
    type c(1,3).
    
- Class: cmd_question
  Output: Check the contents of my_matrix.
  CorrectAnswer: my_matrix
  AnswerTests: omnitest(correctExpr="my_matrix")
  Hint: Type the name of my_matrix to see the inner contents.

- Class: cmd_question
  Output: Have you noticed something different from all of your results above? If you hadn't, then
    subsetting a matrix returns a vector, not a matrix! Let's confirm this. Using your previous
    my_matrix, take the class() to see what it is.
  CorrectAnswer: class(my_matrix)
  AnswerTests: omnitest(correctExpr="class(my_matrix)")
  Hint: class() returns the R class of the object in the first argument. Check the class of my_matrix
    by placing my_matrix as the first argument of class().

- Class: cmd_question
  Output: 'When subsetting R automatically turns the result into a vector (the type of vector will
    depend on the which elements are in the matrix: numbers, characters, etc..). This might
    be what you wanted..or not. Sometimes you simply want to subset something and get a matrix back.
    We can do that by specifying drop = F like this: ourmatrix[1, , drop = F]. Try it
    yourself.'
  CorrectAnswer: ourmatrix[1, , drop = F]
  AnswerTests: omnitest(correctExpr="ourmatrix[1, , drop = F]")
  Hint: Type ourmatrix[1, , drop = F] to get a matrix back.
  
- Class: text
  Output: Great! It's a matrix.

- Class: cmd_question
  Output: One very important thing of matrices is that they can only accept one type of vector.
    A matrix can only be all numeric, all characters, all logicals or all factors. Think about
    what this code will return and then run it matrix(c('character', 1), 2, 2).
  CorrectAnswer: matrix(c('character', 1), 2, 2)
  AnswerTests: omnitest(correctExpr="matrix(c('character', 1), 2, 2)")
  Hint: Type matrix(c('character', 1), 2, 2).

- Class: text
  Output: Think about what R returned..is it what you expected? Why did this happen?
  
- Class: text
  Output: 'Behind the scenes, R accepts only one class within a matrix. It returned a character
    matrix (notice how the 1 is wrapped in ""). By default, R will transform numerics to characters
    where only one class is permitted. Keep this in mind, as you will have to deal with these nuances
    on a daily basis!'

- Class: text
  Output: 'As a final thought, what if we wanted to change the number of the 2nd respondent in his first
    column. How would we go about? Well picture it this way: ourmatrix[2, 1] will return the number we
    want to change. If we know that, then we just have to reassign a new number.
    So ourmatrix[2, 1] <- 4 will change the number of the second respondent in his first column to 4.'
    
- Class: cmd_question
  Output: That was easy, but I'll take you to the limit. ourmatrix has 3 rows and 3 columns.
    Replace the second row with a sequence from 100 to 102.
  CorrectAnswer: ourmatrix[2, ] <- 100:102
  AnswerTests: omnitest(correctExpr="ourmatrix[2, ] <- 100:102")
  Hint: Type ourmatrix[2, ] <- 100:102.

- Class: cmd_question
  Output: Type ourmatrix to see your result
  CorrectAnswer: ourmatrix
  AnswerTests: omnitest(correctExpr="ourmatrix")
  Hint: Type ourmatrix.
  
- Class: text
  Output: Now that you have a good idea about matrices, let's talk about lists. A List is a common
    concept in many programming languages. I'll explain with a practical example. Let's
    think of Santa Claus. If you've been raised in a Western society you should have a good idea of who
    Santa Claus is. If you weren't, then the example is still pretty straight forward.

- Class: text
  Output: Santa Claus had a big bag full of presents, right? Let's assume the bag had 
    three wrapped presents.

- Class: text
  Output: Each present might contain a similar gift, like three books, or it might contain
    completely different presents. Taking the analogy to R, it is exactly the same.
    A list (in the Santa case, the bag) will contain similar or different R objects
    (presents, which might be all books or might be all different objects).
    
- Class: text
  Output: Santa Claus also doesn't have any limits on which type of presents he wants to
    store in his bag. It could be a TV, a phone, carrots or a shampoo. Similarly, in R,
    any object can be stored in a list. A list can contain everything from vectors to matrices
    and data frames (a new data structure we will discuss in the next lesson).

- Class: text
  Output: The list function works this way; list(object1, object2, object N). The N means that you can
    input as many elements as you want. Let's have a look at this list and try to understand it;
    list(myfirst = 1:10, mysecond = c(TRUE, FALSE), mythird = c("books", "toy car")).
    
- Class: text
  Output: This list contains THREE elements separeted by three commas. What is the name of the first
    element? myfirst. What is the name of the third element? mythird. After the equal sign you can
    see the contents of each object and interpret what is the class of each vector.

- Class: cmd_question
  Output: Let's dig in on how to access objects within a list. Let's run the same
    list function as before but let's assign it to the the name ourlist. Assign list(myfirst = 1:10,
    mysecond = c(TRUE,FALSE), mythird = c('books','toy car')) to the name ourlist.
  CorrectAnswer: ourlist <- list(list(myfirst = 1:10, mysecond = c(TRUE,FALSE), mythird = c('books','toy car')))
  AnswerTests: omnitest(correctExpr="ourlist <- list(list(myfirst = 1:10, mysecond = c(TRUE,FALSE), mythird = c('books','toy car')))")
  Hint: Assigning something simply means putting a name followed by the <- sign, so ourlist <-
  
- Class: cmd_question
  Output: Check the class of the ourlist object by typing class(ourlist)
  CorrectAnswer: class(ourlist)
  AnswerTests: omnitest(correctExpr="class(ourlist)")
  Hint: Type class(ourlist)
  
- Class: cmd_question
  Output: Now type ourlist to see it's contents.
  CorrectAnswer: ourlist
  AnswerTests: omnitest(correctExpr="ourlist")
  Hint: Type ourlist
  
- Class: cmd_question
  Output: More usefully, you can use the str() function to look at the structure of any object.
    In our case, check the structure of ourlist.
  CorrectAnswer: str(ourlist)
  AnswerTests: omnitest(correctExpr="str(ourlist)")
  Hint: Type str(ourlist)
  
- Class: text
  Output: This way you can have a look at the contents in a nice format. We have a list of length
    three, the length of each element differs, as well as the class.
  
- Class: cmd_question
  Output: The first object is called $myfirst, the second $mysecond and the third $mythird.
    Note that the $ sign is NOT part of the name, but it is actually a way of SUBSETTING
    the object. Type ourlist$myfirst.
  CorrectAnswer: ourlist[[1]]$myfirst
  AnswerTests: omnitest(correctExpr="ourlist[[1]]$myfirst")
  Hint: Type ourlist[[1]]$myfirst
  
- Class: cmd_question
  Output: And now type class(ourlist[[1]]$myfirst)
  CorrectAnswer: class(ourlist[[1]]$myfirst)
  AnswerTests: omnitest(correctExpr="class(ourlist[[1]]$myfirst)")
  Hint: Type class(ourlist[[1]]$myfirst)

- Class: text
  Output: Why was ourlist[[1]]$myfirst a numeric vector rather than a list?

- Class: text
  Output: ourlist[[1]]$myfirst is NOT a list object but a NUMERIC vector. When you use the
    $ sign you are already accessing the object inside the list. So you can actually treat
    ourlist[[1]]$myfirst as a simple numeric vector. For example, if you wanted to subset the
    third position of a numeric vector you would do it like this; fakevector[3].
    
- Class: cmd_question
  Output: How would you subset the third element of ourlist[[1]]$myfirst? Think hard.
  CorrectAnswer: ourlist[[1]]$myfirst[3]
  AnswerTests: omnitest(correctExpr="ourlist[[1]]$myfirst[3]")
  Hint: Once we've written ourlist[[1]]$myfirst we're not dealing with a list but with a numeric vector!
    The answer is the same; ourlist[[1]]$myfirst[3]

- Class: text
  Output: Another way of subsetting a list is to use brackets. If we wanted to access the second object
    in the list you could also do it like this; ourlist[[1]][2].

- Class: cmd_question
  Output: What is the class of ourlist[[1]][2]?
  CorrectAnswer: class(ourlist[[1]][2])
  AnswerTests: omnitest(correctExpr="class(ourlist[[1]][2])")
  Hint: Type class(ourlist[[1]][2])
  
- Class: text
  Output: If you thought it was a logical vector, that's a common mistake. When a list object is
    followed by one set of brackets, you're subsetting the object but it is still a LIST. If you go
    back to the expression ourlist[[1]][2] you'll see that the output had $mysecond on top. Remember,
    everytime you see the $ sign, it means that it's still inside a list.
    
- Class: cmd_question
  Output: If you wanted to access the specific vector then you need to wrap the number in two sets
    of brackets. ourlist[[1]][[2]] should give you what you’re looking for. Check it yourself with the
    class() function.
  CorrectAnswer: class(ourlist[[1]][[2]])
  AnswerTests: omnitest(correctExpr="class(ourlist[[1]][[2]])")
  Hint: Type class(ourlist[[1]][[2]])
  
- Class: text
  Output: Let's do a quick recap. ourlist is a list that has three elements. If we typed
    ourlist[1], we would still get a list with three elements. In the case of ourlist, ourlist[[1]]
    would give us a list with the three elements. If we wanted to access the content of the numeric
    vector, we use double brackets like this; ourlist[[1]][[1]]. In this example we're subsetting by
    position, so we double bracket the first element of ourlist and the subset the first element of that.
    
- Class: text
  Output: In short, ourlist[[1]]$myfirst and ourlist[[1]][[1]] are equivalent. Whereas ourlist[1]
    returns a list rather than the contents of the first element.
    
- Class: cmd_question
  Output: Surpise quiz! First, type the str()ucture of ourlist.
  CorrectAnswer: str(ourlist)
  AnswerTests: omnitest(correctExpr="str(ourlist)")
  Hint: Type str(ourlist)
    
- Class: mult_question
  Output: Which of these expressions subsets the FALSE? 
  AnswerChoices: ourlist[[1]][[2]]; ourlist[[2]][2]; ourlist$2[[2]]; ourlist$mysecond[2]; ourlist[[1]]$mysecond[2]
  CorrectAnswer: ourlist[[1]]$mysecond[2]
  AnswerTests: omnitest(correctVal= 'ourlist[[1]]$mysecond[2]')
  Hint: The $ operator can only subset by names and not by position (i.e. numbers)
  
- Class: mult_question
  Output: Can you give me the third element as a list?
  AnswerChoices: ourlist[[1]][3]; ourlist$mythird; ourlist[[3]]
  CorrectAnswer: ourlist[[1]][3]
  AnswerTests: omnitest(correctVal= 'ourlist[[1]][3]')
  Hint: Remember, one set of brackets is the only operator that returns a list while the $ sign
    or the double brackets will return the inner object of the list.
    
- Class: mult_question
  Output: Please subset from numbers 5 to 10 from the first element.
  AnswerChoices: ourlist[[1]][5:10]; ourlist[1][[5:10]]; ourlist[[1]][[5:10]]; ourlist[[1]][[1]][5:10]
  CorrectAnswer: ourlist[[1]][[1]][5:10]
  AnswerTests: omnitest(correctVal= 'ourlist[[1]][[1]][5:10]')
  Hint: Remember, one set of brackets is the only operator that returns a list while the $ sign
    or the double brackets will return the inner object of the list.
  
- Class: text
  Output: You might think, what are lists useful for? Usually you use lists when you have similar things
    and you want to keep them organized. For example, data for a single country for
    several years. We can keep each year as an element of a list. Lists are very common to use
    with for loops and the apply family. You loop through the elements of a list and apply an
    operation.
    
- Class: text
  Output: But more importantly, a list is the foundation of a data frame, which is, I'd say, the primary
    unit of analysis in R. Data frames are just like matrices, but can have different objects as columns
    or rows, just like in your typical Excel data base. We'll be talking about data frames in the next
    lessons!
  
- Class: text
  Output: That should give you a pretty good idea about what lists are all about. You learned some
    pretty neat stuff today! Now go over  to the next lesson.
