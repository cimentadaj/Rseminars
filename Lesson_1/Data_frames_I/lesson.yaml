- Class: meta
  Course: RonR! Second seminar
  Lesson: Data frames I
  Author: Jorge Cimentada and Basilio Moreno
  Type: Standard
  Organization: RECSM, UPF
  Version: 2.2.21

- Class: text
  Output: Welcome! On this lesson will talk about data frames, probably the most pivotal
    object in R, and the one you will use the most. 

- Class: text
  Output: To put it bluntly, a data frame is the typical dataset you deal with in programs
    like Excel, SAS, STATA and SPSS. It has a rectangular shape with rows and columns, where each
    column might be of a different class, i.e. numeric, categorical, character or logical.
    
- Class: cmd_question
  Output: Type head(iris) to see an example of a data frame. mtcars is the data frame and we're
    only looking at the top rows by using head()
  CorrectAnswer: head(iris)
  AnswerTests: omnitest(correctExpr= 'head(iris)')
  Hint: 'Type head(iris)'

- Class: text
  Output: The most important difference between matrices and data frames is that for data frames
    any column can have a different class (numeric, character, logical or factor). The iris data
    above has some numeric and character columns.

- Class: text
  Output: A data frame may, for many purposes, be thought of as a matrix with columns of
    differing classes. It will be printed like a matrix, and its rows and columns may
    be extracted using matrix indexing conventions. You remember those, right?
  
- Class: text
  Output: Now let's get our hands dirty and create a data frame!
  
- Class: text
  Output: 'The data frame function works like this:
    data.frame(column1 = contents, column2 = contents, columN = contents). Preceding the
    `=` sign we write the name of the column and after it its contents.'
  
- Class: text
  Output: 'Without getting too scared, have a look at this data frame:
    states <- data.frame(code = c("CA", "NY", "NE", "AZ"), 
                     population = c(38.8, 19.7, 2.1, 6.8), 
                     region     = c("West", "Northeast", "Midwest", "West"), 
                     landlock   = c(FALSE, FALSE, TRUE, TRUE))'

- Class: mult_question
  Output: We're creating a data frame called states, right?
    It contains 4 columns(code, population, region, landlock). If I asked you, what is the class of the
    FOURTH column, what would you say?
  AnswerChoices: Numeric; Character; Logical; Factor
  CorrectAnswer: Logical
  AnswerTests: omnitest(correctVal= 'Logical')
  Hint: Remember, if it's TRUE and FALSE, it must be a logical vector
  
- Class: exact_question
  Output: How many rows will this data frame have? Write down the number
  CorrectAnswer: 4
  AnswerTests: omnitest(correctVal=4)
  Hint: What is the length of any of the columns? That would be the number of rows
  
- Class: text
  Output: 'In fact, the first element of each vector composes what will be the first row,
  the second elements are the second row and so on..'
  
- Class: cmd_question
  Output: Data frames and matrices are two dimensional objects. That is, they have rows and columns.
    Using the dim()ension function look at the number of rows and columns of the iris data frame.
  CorrectAnswer: dim(iris)
  AnswerTests: omnitest(correctExpr= 'dim(iris)')
  Hint: 'Type dim(iris)'
  
- Class: exact_question
  Output: How many rows does the iris data have?
  CorrectAnswer: 150
  AnswerTests: omnitest(correctVal = 150)
  Hint: Just like indexing rows or columns in matrices, the first number refers to rows while the
    second refers to columns.
    
- Class: cmd_question
  Output: Now that I've quizzed you, let's have a look at our dataset. Type states.
  CorrectAnswer: states
  AnswerTests: omnitest(correctExpr= 'states')
  Hint: 'Type states'
    
- Class: text
  Output: 'We can access elements via indexing the same way as we would do in a matrix.
    For example, states[, 3] would subset the third column by its position'
  
- Class: text
  Output: 'The expression states[, "region"] would subset the region column, the
    third column. However here you are subsetting by its name rather than by its position.'
  
- Class: text
  Output: 'Finally, you can also call it by its name by typing states$region. You can read this
  as: take the states data frame and subset region column'

- Class: mult_question
  Output: If you think this is too much information, it's not! It's the same conventions as with
    matrices. For example, which type of these subsets would NOT work for a matrix?
  AnswerChoices: states$region; states[, 3]; states[3]
  CorrectAnswer: states$region
  AnswerTests: omnitest(correctVal= 'states$region')
  Hint: Matrices are not lists, so they can't be subsetted using the dollar sign with a name.
  
- Class: text
  Output: The previous question is very telling on the difference between data frames and matrices.
    Remember that lists had $ signs infront of their names? And that they can contain any type of
    class? Well, newsflash, a data frame is a collection of lists (columns) that have the same length.
    
- Class: text
  Output: For example, column region is actually a list that has a character vector called region
    as its contents. That is the reason why typing states$region will work in a data frame and not
    in a matrix. If matrices were lists, you could not only use the $ sign but have different classes
    for different columns.
  
- Class: text
  Output: 'We can also add new variables by doing something like this: states$spanish <-
    c(28.5, 15.7, NA, 19.5). We created a variable called spanish contaning 4 values and
    bind it to the data frame in the same expression'
  
- Class: cmd_question
  Output: Create a vector named zipcode which has the numeric values 1, 0, 1 and 0
  CorrectAnswer: zipcode <- c(1, 0, 1 ,0)
  AnswerTests: omnitest(correctExpr= 'zipcode <- c(1, 0, 1, 0)')
  Hint: 'Type zipcode <- c(1 ,0, 1, 0)'
  
- Class: cmd_question
  Output: Now try to add the zipcode variable to the states data frame. Give it the same name inside
    the states data frame.
  CorrectAnswer: states$zipcode <- zipcode
  AnswerTests: omnitest(correctExpr= 'states$zipcode <- zipcode')
  Hint: 'If you want to create the variable then you type states$zipcode and assign the
    zipcode variable to that. So the correct expression would be something like
    states$newvariable <- newvariable'

- Class: mult_question
  Output: Each column in a data frame needs to have the same length -- obviously. Does typing
    something like this work without errors? states$gay_marriage <- c("Y", "N", "N").
  AnswerChoices: It wont work; It works seamlessly; It works but throws a warning
  CorrectAnswer: It wont work
  AnswerTests: omnitest(correctVal= 'It wont work')
  Hint: R will recycle only vectors that are multiples of the number of rows. So a vector
    of length 2 will be recycled in a data frame with 4, 6, 8, ..., rows.
  
- Class: text
  Output: Whenever we add a vector of a shorter length than the data frame, the contents of the vector
    will be repeated until it reaches the length of the data frame. For example, the vector c("Y", "N")
    will be repeated to be c("Y", "N", "Y", "N"). However, c(1, 2, 3) is not a multiple of the
    number of rows of states, so an error will be thrown. R can turn c(1, 2) into c(1, 2, 1, 2)
    but not c(1, 2, 3) into c(1, 2, 3, 1).

- Class: cmd_question
  Output: Using the $ sign, add a variable called gay_marriage to the states data frame that
    contains two FALSES.
  CorrectAnswer: states$gay_marriage <- c(F, F)
  AnswerTests: any_of_exprs('states$gay_marriage <- c(F, F)', 'states$gay_marriage <- c(FALSE, FALSE)')
  Hint: 'Type something along the lines of states$new_vector <- the TWO FALSES'
  
- Class: text
  Output: 'We can edit values putting together a few things that we have seen so far:
    states$population[states$code == "NE"] <- 1.8'

- Class: cmd_question
  Output: Don't panic! Let's read it through. First, we have the states$population part.
    That is simply a vector which contains the population. Show me the contents of population
    using the $ sign.
  CorrectAnswer: states$population
  AnswerTests: omnitest(correctExpr= 'states$population')
  Hint: Using the $ sign, take the states variable and subset ($) the population column.
  
- Class: text
  Output: "The next part is [states$code == 'NE']. Remember that if we have vector with the
    [ ] after it, we're subsetting something from that vector. So in this case we can read the
    entire expression as: take the population column, and where the CODE column equals 'NE'
    replace the population column with 1.8."

- Class: cmd_question
  Output: Type states
  CorrectAnswer: states
  AnswerTests: omnitest(correctExpr= 'states')
  Hint: 'Type states'

- Class: text
  Output: Let's go over it manually. First column is code and the second is population
  
- Class: text
  Output: "Have a look at the 1st row of the population column, does it have the 'NE' on the
    code column? No. Does the second row of population have the NE on the code column? No.
    Does the 3rd row of population have the NE on the code column? Yes. So the expression
    replaces the population value 2.1 with 1.8 when that condition is met"

- Class: text
  Output: 'I hope that was clearer'

- Class: cmd_question
  Output: "Now you do it for me. Where the population column is higher (>) than 20, replace 
    the landlock column with a TRUE. The code should read something like: landlock, where population
     > 20, will be TRUE."
  CorrectAnswer: states$landlock[states$population > 20] <- TRUE
  AnswerTests: omnitest(correctExpr= 'states$landlock[states$population > 20] <- TRUE')
  Hint: states$landlock gives the landlock vector. Placing the [] after it and including
    states$population > 20 inside will search for the correction condition, after this, simply
    assign a TRUE.

- Class: text
  Output: 'The same approach can be used for subsetting a dataset: states[states$population > 10, ]
    Note: Notice the comma!'
  
- Class: mult_question
  Output: What is this function doing?
  AnswerChoices: Subsetting all columns and all rows; Subsetting all rows for only the population column;
    Subsetting all rows where population is higher or equal to 10; Subsetting all rows where population is higher than 10
  CorrectAnswer: Subsetting all rows where population is higher than 10
  AnswerTests: omnitest(correctVal= 'Subsetting all rows where population is higher than 10')
  Hint: Before the commas we're talking rows, after the comma we're dealing with columns. This expression means
    take all the rows on which population is above 10 and INCLUDE all columns.
    
- Class: text
  Output: Now that you know your data chops, go ahead an delve into your own analysis!
