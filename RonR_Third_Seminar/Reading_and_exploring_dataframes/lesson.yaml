- Class: meta
  Course: RonR! third
  Lesson: Reading and exploring data frames
  Author: Jorge Cimentada from Daniel Ciganda's materials.
  Type: Standard
  Organization: RECSM, UPF
  Version: 2.2.21
 
- Class: text
  Output: Hello! Welcome to the 1st lesson of the third RonR! seminar. On this lesson we will
    talk about how to open text files, Excel files, SPSS, Stata and SAS files.
    Finally, we will talk about some data exploration commands normally used in R.
     
- Class: text
  Output: 'Note: You will need to have access to an internet connection to complete this session.'
  
- Class: cmd_question
  Output: First of all you need to know how to access your working directory and how to set it.
    The working directory is simply the place where R will look for stuff when you run any command.
    Please type getwd() to see your working directory.
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: Type getwd()
  
- Class: text
  Output: Although we won't go into it, you can change this directory with the setwd() function.
    An example line would be setwd("your new path"). Although this is easy, be sure to read
    more about setwd() because Windows often uses the '\' character while Mac uses the '/' character
    when defining paths. Frustrating problems can arise from simple things like this.
    
- Class: text
  Output: When you installed the course we took the liberty of downloading some data files to your
    working directory. Let's start by opening one of those csv files. Open the physical folder of your
    working directory and open the file asfr752012ine1.csv.
    
- Class: cmd_question
  Output: Each number is separated by a comma. Let's try to read
        that file using the read.table function. Type read.table("asfr752012ine1.csv")
  CorrectAnswer: read.table("asfr752012ine1.csv")
  AnswerTests: omnitest(correctExpr='read.table("asfr752012ine1.csv")')
  Hint: Type read.table("asfr752012ine1.csv")
  
- Class: cmd_question
  Output: That's not a nice looking table. We forgot to specify that the first two lines are the column names and
    that the table is separated by commas. We can fix that by
    typing asfr7512 <- read.table("asfr752012ine1.csv", sep = ",", header=TRUE). Go ahead.
  CorrectAnswer: asfr7512 <- read.table("asfr752012ine1.csv", sep = ",", header=TRUE)
  AnswerTests: omnitest(correctExpr='asfr7512 <- read.table("asfr752012ine1.csv", sep = ",", header=TRUE)')
  Hint: Type asfr7512 <- read.table("asfr752012ine1.csv", sep = ",", header=TRUE)

- Class: cmd_question
  Output: Since we assigned the new dataset to asfr7512, type asfr7512 to see its contents.
  CorrectAnswer: asfr7512
  AnswerTests: omnitest(correctExpr='asfr7512')
  Hint: Type asfr7512
  
- Class: text
  Output: In the same folder from where you opened that spreadsheet, you should also see a file named 
        INE_fempopJul1975.xls. Open it as well. If you don't have Excel, then just follow along,
        everything will still work fine.

- Class: text
  Output: If you were able to open the spreadsheet, there is some annoying text in the first few rows
    and in the bottom rows.
  
- Class: text
  Output: Although we could read that xls file from R, the best way to read an Excel file is to export
    it to a comma delimited file and import it using the function we already used. Alternatively you can use
    one of the many packages available (XLConnect, xlsx, gdata, ...)

- Class: text
  Output: I already converted that xls file to CSV using this website https://convertio.co/es/xls-csv/
    
- Class: cmd_question
  Output: We wanna open that file into R but it has some lines at the top and bottom that we have to ignore.
    The whole command is femPop75 <- read.table("INE_fempopJul1975.csv",
    sep = ",", skip=9, nrows=51, header=TRUE). Type it as it is.
  CorrectAnswer: femPop75 <- read.table("INE_fempopJul1975.csv", sep = ",", skip=9, nrows=51, header=TRUE)
  AnswerTests: omnitest(correctExpr='femPop75 <- read.table("INE_fempopJul1975.csv", sep = ",", skip=9, nrows=51, header=TRUE)')
  Hint: Type femPop75 <- read.table("INE_fempopJul1975.csv", sep = ",", skip=9, nrows=51, header=TRUE)

- Class: text
  Output: Let's make sense of the command = read the csv file "INE_fempopJul1975.csv", specify that it is comma
    separated, skip the first 9 lines(because there's useless text there), read UP until row 51(because there's useless text after that)
    and treat the first row as the column names
    
- Class: cmd_question
  Output: Type View(femPop75)
  CorrectAnswer: View(femPop75)
  AnswerTests: omnitest(correctExpr='View(femPop75)')
  Hint: Type View(femPop75)
  
- Class: text
  Output: To read Stata, SPSS and SAS files you can use the Haven package. I took the liberty of installing
    it and loading it for you. The three main functions are read_dta, read_spss, and read_sas, for Stata,
    SPSS and SAS respectively.
    
- Class: text
  Output: You have a dataset for each program in your working directory, let's read them.
  
- Class: cmd_question
  Output: For the Stata file, we use the read_dta function. The correct expression would be read_dta("Egypt.dta").
        Go ahead and try it yourself.
  CorrectAnswer: read_dta("Egypt.dta")
  AnswerTests: omnitest(correctExpr='read_dta("Egypt.dta")')
  Hint: Type read_dta("Egypt.dta")
  
- Class: cmd_question
  Output: For SPSS the logic is exactly the same, read_spss("Anxiety.sav") would read the Anxiety dataset from
        the working directory. Go ahead and type it.
  CorrectAnswer: read_spss("Anxiety.sav")
  AnswerTests: omnitest(correctExpr='read_spss("Anxiety.sav")')
  Hint: Type read_spss("Anxiety.sav")
  
- Class: cmd_question
  Output: Following the same logic, try it for the SAS dataset. The dataset name is "airline.sas7bdat" and the 
        function to use is read_sas.
  CorrectAnswer: read_sas("airline.sas7bdat")
  AnswerTests: omnitest(correctExpr='read_sas("airline.sas7bdat")')
  Hint: 'You have to read the dataset using the read_sas function like this: read_sas("airline.sas7bdat")'
 
- Class: text
  Output: Reading datasets can be a complex topic and this is just the tip of the iceberg. For extra information
    on each specific function you can type any of the functions presented here with a preceding ? in front.
    For example, ?read.table or ?read_dta
  
- Class: cmd_question
  Output: Going back to our initial csv file, let's explore the dataset. First let's see which class it is
        just to make sure we have a data frame. Type class(asfr7512)
  CorrectAnswer: class(asfr7512)
  AnswerTests: omnitest(correctExpr='class(asfr7512)')
  Hint: Type class(asfr7512)
  
- Class: cmd_question
  Output: Phew!  We're alright for now. Let's look at how many rows and
        columns it has by typing dim(asfr7512).
  CorrectAnswer: dim(asfr7512)
  AnswerTests: omnitest(correctExpr='dim(asfr7512)')
  Hint: Type dim(asfr7512)
  
- Class: text
  Output: 'dim stands for dimensions, as you might have thought. Remember when we used the [rows, columns]
    option to subset columns and rows from matrices and data frames? In R, everything that deals with rows
    and columns has that specific order: rows and columns. In this case, this data frame has 35 rows
    and 40 columns'
    
- Class: cmd_question
  Output: Additionally, we have some specific functions like nrow() and ncol(). As their names
        suggest, they show the number of rows and columns. Try ncol() with our asfr7512 dataset.
  CorrectAnswer: ncol(asfr7512)
  AnswerTests: omnitest(correctExpr='ncol(asfr7512)')
  Hint: Type ncol(asfr7512)
  
- Class: mult_question
  Output: To access the names of the columns we can do so with the names() function. This will
    give you a character vector containing each column name. If I told you that the first five column
    names were c("Age","X1975","X1976","X1977","X1978"), what would be the result of names(asfr7512)[3]
  AnswerChoices: Age;X1975;X1976;X1977;X1978
  CorrectAnswer: X1976
  AnswerTests: omnitest(correctVal= 'X1976')
  
- Class: cmd_question
  Output: Let's take a look at how to visualize a dataset. So far we've only used the View() function to
    visulize our data physically. If we typed asfr7512 in the console R would print the entire dataset
    in the console, which can be quite ugly. For that we have the head() function. Type head()
    with the name of our dataset inside(the name is asfr7512)
  CorrectAnswer: head(asfr7512)
  AnswerTests: omnitest(correctExpr='head(asfr7512)')
  Hint: Type head(asfr7512)

- Class: text
  Output: This is a nice way of getting a feel of the dataset without printing ALL observations
  
- Class: text
  Output: Alternatively you can increase or decrease the number of rows that head() prints by specifing the 
         desired rows in the n = argument
    
- Class: mult_question
  Output: 'Surprise quiz! How would you read this? head(asfr7512[,2:10],n = 20) Advice: read the expression
         by chunks instead of reading everything together.'
  AnswerChoices: Print the column 20 for the 2nd and 10th row;Print the columns 2 AND 10 and only show the first 20 rows;Print from columns 2 TO 10 and only show the first 20 rows;Print from columns 2 TO 10 and include the column 20
  CorrectAnswer: Print from columns 2 TO 10 and only show the first 20 rows
  AnswerTests: omnitest(correctVal= 'Print from columns 2 TO 10 and only show the first 20 rows')
  
- Class: cmd_question
  Output: Similarly to head(), we have tail(). I think it's pretty intuitive but confirm your hunch
        by typing tail(asfr7512)
  CorrectAnswer: tail(asfr7512)
  AnswerTests: omnitest(correctExpr='tail(asfr7512)')
  Hint: Type tail(asfr7512)
  
- Class: text
  Output: You get the bottom part of the dataset. Let's finish by using the summary() and str() functions
  
- Class: cmd_question
  Output: summary() gives you a summary of each column in the data frame; the output includes descriptive statistics
        like minimum, maximum, quantiles and mean. Inspect the results by typing summary(asfr7512)
  CorrectAnswer: summary(asfr7512)
  AnswerTests: omnitest(correctExpr='summary(asfr7512)')
  Hint: Type summary(asfr7512)
  
- Class: cmd_question
  Output: Lastly, str() gives the structure of each column. For each column you get its' name,
        its' class and some of its values. If the column is a factor, you get the number of levels,
        among other things. Type str(asfr7512).
  CorrectAnswer: str(asfr7512)
  AnswerTests: omnitest(correctExpr='str(asfr7512)')
  Hint: Type str(asfr7512)
  
- Class: text
  Output: Hope this was useful! These are functions you will constantly use in R so congratulations!
