- Class: meta
  Course: RonR! third
  Lesson: Descriptive statistics
  Author: Jorge Cimentada from Daniel Cigandas material
  Type: Standard
  Organization: RECSM, UPF
  Version: 2.2.21

- Class: text
  Output: Hello and welcome to the third lesson of the 3rd RonR! seminar. On this lesson
        we will cover the basics of descriptive statistics, frequency tables and correlation,
        the main functions for Exploratory Data Analysis (EDA).
        
- Class: text
  Output: This lesson is not about statistics nor it will explain what each function does in detail.
    The purpose is to show you that R has these standard functions available and that you can use
    them whenever you want. In case you already know what they mean, then they will prove handy.
    
- Class: video
  Output: First, let's read the data. Please, inspect the data.
  VideoLink: https://raw.githubusercontent.com/cimentadaj/Rseminars/master/RonR_Third_Seminar/Descriptive_statistics/data/asfr1314ine.txt

- Class: cmd_question
  Output: I stored the url in a string vector called txt_file in your workspace. Read it and
    give it the name dati. Hint; while reading the data, change the three column names to
    c('age', 'X2014', 'X2013', "year_equal", "age_groups").
  CorrectAnswer: dati <- read.table(txt_file, header = T, col.names = c("age", "X2014", "X2013", "year_equal", "age_groups", "year_equal", "age_groups"), sep = " ")
  AnswerTests: omnitest(correctExpr=('dati <- read.table(txt_file, header = T, col.names = c("age", "X2014", "X2013", "year_equal", "age_groups"), sep = " ")'))
  Hint: Okay, so there are two difficulties. If you looked at the table, there's 4 columns
    but only three column names. You have to specify (in read.table) that the first row is the
    column names and provide new names. Use ?read.table to find the arguments and remember
    to specify the 'sep' argument!
  
- Class: cmd_question
  Output: Have a look at the first few rows of dati.
  CorrectAnswer: head(dati)
  AnswerTests: omnitest(correctExpr='head(dati)')
  Hint: Type head(dati)
  
- Class: cmd_question
  Output: Now let's have a look at the 'tail' of the dataset. Try it
  CorrectAnswer: tail(dati)
  AnswerTests: omnitest(correctExpr='tail(dati)')
  Hint: Type tail(dati)
  
- Class: cmd_question
  Output: Use dim() with dati.
  CorrectAnswer: dim(dati)
  AnswerTests: omnitest(correctExpr='dim(dati)')
  Hint: Type dim(dati)

- Class: mult_question
  Output: What's the oldest age in the dataset?
  AnswerChoices: 33; 35; 42; 44; 40; We don't have that information
  CorrectAnswer: We don't have that information
  AnswerTests: omnitest(correctVal= 'We don't have that information')

- Class: text
  Output: Gotcha there! The age variable is a mistake! It's actually the index variable
    which got confused as the age variable. How could you tell? Well the first age is age 1.
    Which child at age 1 has a rate of 2.43 and 2.55 children per year. We have to create
    the new age variable.
    
- Class: cmd_question
  Output: Create a new variable called age which is a seq() from 15 to 49.
  CorrectAnswer: dati$age <- seq(15, 49)
  AnswerTests: omnitest(correctExpr='dati$age <- seq(15, 49)')
  Hint: Type dati$age <- seq(15, 49)
  
- Class: text
  Output: It's always a good habit to inspect your dataset, specially after reading it
    just to check that it was read correctly it doesn't have any errors.
        
- Class: text
  Output: R has some standard functions to calculate descriptive statistics. To name a few, mean is
        mean(), the standard deviation is sd(), the variance is var() and the median is median().

- Class: mult_question
  Output: Let's calculate some means! If I typed mean(dati), what would I get?
  AnswerChoices: The mean of dati; The mean of X2014 and X2013; An error;
  CorrectAnswer: An error
  AnswerTests: omnitest(correctVal= 'An error')
  
- Class: cmd_question
  Output: Alright, that was a trick question. Remember that dati is a data frame! It contains several columns
        and many rows. Can you calculate the mean of a data frame? The correct expression
        would be to calculate the mean of, for example, X2014 using the $ operator from the data frame dati. Try it
        yourself.
  CorrectAnswer: mean(dati$X2014)
  AnswerTests: omnitest(correctExpr='mean(dati$X2014)')
  Hint: dati$X2014 is the variable maxgrip, so simply type mean(dati$maxgrip)
  
- Class: text
  Output: Almost all of these summary functions have the argument 'na.rm'. By default, it it set
    to FALSE. That means that if your variable has NA's, mean() or any other function will return
    an NA.
    
- Class: cmd_question
  Output: For example, mean(c(1, 5, 7, 3, NA)) will return an NA. Rewrite the same expression
    so that the output doesn't return an NA.
  CorrectAnswer: mean(c(1, 5, 7, 3, NA), na.rm = T)
  AnswerTests: omnitest(correctExpr='mean(c(1, 5, 7, 3, NA), na.rm = T)')
  Hint: Leave the vector as it is, simply add the na.rm = T argument to the mean() function.


- Class: cmd_question
  Output: Using the sd() function calculate the standard deviation of X2013
  CorrectAnswer: sd(dati$X2013)
  AnswerTests: omnitest(correctExpr='sd(dati$X2013)')
  Hint: Include the variable dati$X2013 inside sd().
  
- Class: cmd_question
  Output: Do exactly the same with var() function to calculate the variance of X2013.
  CorrectAnswer: var(dati$X2013)
  AnswerTests: omnitest(correctExpr='var(dati$X2013)')
  Hint: Include the variable dati$X2013 inside var().
  
- Class: cmd_question
  Output: Suppose we want to compare the result of the mean() function with the median() function.
    Calculate the median() of X2013.
  CorrectAnswer: median(dati$X2013)
  AnswerTests: omnitest(correctExpr='median(dati$X2013)')
  Hint: Type median(dati$X2013)
  
- Class: cmd_question
  Output: What about quantiles? They're pretty easy to get with the quantile() function.
    Without me explaining it, try to use the quantile() function on our X2013 variable.
  CorrectAnswer: quantile(dati$X2013)
  AnswerTests: omnitest(correctExpr='quantile(dati$X2013)')
  Hint: Type quantile(dati$X2013)
  
- Class: text
  Output: That's nice! But what if we wanted a specific quantile? Then we specify it as a
    second argument like here quantile(dati$X2013, 0.65). That would give us the value
    of the 65th quantile.

- Class: text
  Output: Okay, all those summary statistics are great, but we need to explore the power of R.
    Your task is to create a named vector that contains a space for the mean, median and sd.
    
- Class: cmd_question
  Output: For the dati$X2014 variable, create a named vector that contains the mean, median
    and sd. Because we will repeat the 'dati' name several times, use with() at the beginning.
  CorrectAnswer: with(dati, c(mean = mean(X2014), median = median(X2014), sd = sd(X2014)))
  AnswerTests: omnitest(correctExpr='with(dati, c(mean = mean(X2014), median = median(X2014), sd = sd(X2014)))')
  Hint: Create a named vector like this one..with(dati, c(mean = mean(X2014)...))
  
- Class: cmd_question
  Output: You could add as many summary statistics as you'd like and your own customized
    summary. However, smart people already though of that. Use the summary()
    function on the X2014 variable.
  CorrectAnswer: summary(dati$X2014)
  AnswerTests: omnitest(correctExpr='summary(dati$X2014)')
  Hint: Include dati$X2014 inside summary.

- Class: text
  Output: Great work! Let's move into tables.

# You left off here. Now you have categorical variables to play with.
# Replay the lesson. Reading the data is not working. Remember to update everything
# So that there are now 5 variables instead of three.

- Class: cmd_question
  Output: R has the table() function. It has as many arguments as you want to specify.
    Let's imagine we want to see the number of people within a country. Type table(dati$country)
  CorrectAnswer: table(dati$country)
  AnswerTests: omnitest(correctExpr='table(dati$country)')
  Hint: Type table(dati$country)
  
- Class: cmd_question
  Output: Let's look at the number of males and females within each country. Take the last table
        add a comma and add the sex variable from the dati dataframe. This time
        save the table to an object named ourtable using the <- operator.
  CorrectAnswer: ourtable <- table(dati$country, dati$sex)
  AnswerTests: omnitest(correctExpr='ourtable <- table(dati$country, dati$sex)')
  Hint: Type ourtable <- table(dati$country, dati$sex). This will give you a two way table.

- Class: text
  Output: We can add as many other variables as you want by simply putting a comma and adding another
        variable. You could create 3, 4, 5 way tables if you want.
        
- Class: cmd_question
  Output: However what many people are after when computing frequencies is not the number of people in
    these tables but the proportion or percentage. We can use the prop.table() function, with our
    table object and specify the margin argumen to 1 to get the percentages by row. Try it with this
    expression prop.table(x=ourtable,margin=1)
  CorrectAnswer: prop.table(x=ourtable,margin=1)
  AnswerTests: omnitest(correctExpr='prop.table(x=ourtable,margin=1)')
  Hint: Type prop.table(x=ourtable,margin=1)
  
- Class: text
  Output: You could get the column percentages by changing the 1 for a 2 in the margin argument.
  
- Class: text
  Output: You can also get the relative frequencies dividing the table by the total amount of observations.
    A smart way of doing this would be to write ourtable / sum(ourtable). You can read it as
    each number in our table divided by the sum of all the numbers of our table -- the total number
    of observations.
    
- Class: text
  Output: A cool thing you can do with R is divide a continuous variable into groups
    for exploratory purposes. The cut() function cuts a continuous variable into a desired number
    groups.
    
- Class: cmd_question
  Output: Let's see an example. We have our maxgrip variable which is a continuous variable. Type
        table(dati$maxgrip) to see the outcome.
  CorrectAnswer: table(dati$maxgrip)
  AnswerTests: omnitest(correctExpr='table(dati$maxgrip)')
  Hint: Type table(dati$maxgrip)
  
- Class: text
  Output: That's neither a nice output nor an informative table. Let's make it better with
    the cut function. maxgrip goes from 0 to 42, so let's cut it in groups of 5. So the amount of
    people between 0-5, 5-10, and so on...

- Class: text
  Output: Let's read the expression before seeing it. I want R to cut dati$maxgrip from 0
    to 45 into chunks of 5. As an additional argument, we want R to include 0, which is the LOWEST
    number in our numeric variable.
    
- Class: cmd_question
  Output: The corresponding expression would be this cut.maxgrip <- cut(dati$maxgrip, breaks=seq(0, 45, by= 5),
        include.lowest=TRUE) . Before typing it down, read it carefully and try to understand it.
  CorrectAnswer: cut.maxgrip <- cut(dati$maxgrip, breaks=seq(0, 45, by= 5),include.lowest=TRUE)
  AnswerTests: omnitest(correctExpr='cut.maxgrip <- cut(dati$maxgrip, breaks=seq(0, 45, by= 5),include.lowest=TRUE)')
  Hint: Type cut.maxgrip <- cut(dati$maxgrip, breaks=seq(0, 45, by= 5),include.lowest=TRUE)
  
- Class: cmd_question
  Output: The remaining part is easy, write down table() with the cut.maxgrip object inside.
  CorrectAnswer: table(cut.maxgrip)
  AnswerTests: omnitest(correctExpr='table(cut.maxgrip)')
  Hint: Type table(cut.maxgrip)
        
- Class: cmd_question
  Output: Cool, eh? Finally, for those of you which use correlation, the function is cor(). Want to
    calculate the correlation between dati$height and dati$weight? cor(dati$height,dati$weight)
    will do the job. Write it down.
  CorrectAnswer: cor(dati$height, dati$weight)
  AnswerTests: omnitest(correctExpr='cor(dati$height, dati$weight)')
  Hint: Type cor(dati$height, dati$weight)
  
- Class: cmd_question
  Output: Ah! Of course! If the correlation has missing values, then you can't calculate the correlation. Take the same expression
      and add the argument use = "complete.obs" to your function. It is simply saying = use only complete observations
  CorrectAnswer: cor(dati$height, dati$weight, use = "complete.obs")
  AnswerTests: omnitest(correctExpr='cor(dati$height, dati$weight, use = "complete.obs")')
  Hint: Type cor(dati$height, dati$weight, use = "complete.obs")
  
- Class: text
  Output: I hope all of this was useful! It certainly is to me.
