- Class: meta
  Course: RonR_Third_Seminar
  Lesson: Exploratory Data Analysis
  Author: Jorge Cimentada
  Type: Standard
  Organization: RECSM
  Version: 2.4.3

# remove two column names for when reading
# Change USA to United States
# Recode age to age groups
# Recode religion to yes or no
# Turn poverty into an ordered factor

# Two ways of reading the data
# m <- read.table("./data/wvs")
# p <- read.csv2("./data/wvs_semi_colon")

- Class: text
  Output: Hi and welcome to the final swirl lesson! This will be a challenge lesson where we attempt
    do some Exploratory Data Analysis using the concepts we've touched upon until now.
    
- Class: text
  Output: Note that you'll need internet to complete this exercise!

- Class: text
  Output: Let's being with the data. I've grabbed some data from the World Value S (WVS) where we will
    explore whether the population in countries like Norway, Sweden, Australia and US belong to a
    particular religion, and how does that differ by gender, education and age.
  
- Class: text
  Output: First thing's first. We have to open the data and look how to read it. If you have internet, 
    follow this link to check both datasets https://github.com/cimentadaj/Rseminars/tree/master/RonR_Third_Seminar/EDA/data
  
- Class: text
  Output: If you don't have internet, the data should be in the folder in the data_paths vector. Type it.

- Class: cmd_question
  Output: If you don't have internet, the data should be in the folder in the data_paths vector. Type it.
  CorrectAnswer: data_paths
  AnswerTests: omnitest(correctExpr='data_paths')
  Hint: Type data_paths

- Class: mult_question
  Output: After visually inspecting the data, which functions do we need to open wvs and wvs_semi_colon
    respectively? Don't close the files just yet, because we'll need to look at them again.
  AnswerChoices: write.delim(sep = ",") and read.csv(); write.table() and read.csv2(); read.table() and read.csv2(); read.csv2() and read.csv()
  CorrectAnswer: read.table() and read.csv2()
  AnswerTests: omnitest(correctVal= 'read.table() and read.csv2()')
  Hint: Look at the separator of each file. The first one is a space and the second one is a semi-colon,
    both the default separators of read.table() and read.csv2()

- Class: text
  Output: So, the whole idea is to get a feel of the data before we read it. What's the separator of each
    cell? Is the first row the column names? Are column names complete? These are things you should be
    looking for when reading in data.

- Class: text
  Output: Let's begin by reading wsv. We know we have to use read.table() but we have to specify
    some other things. For example, the last column name is missing, and there's only 3 column
    names (including the missing column) for 4 columns. We have to specify that!

- Class: cmd_question
  Output: Okay, so using the wvs_url vector (contains the url to the first data), read the
    data using read.table(). Remember to specify the first row as header.
  CorrectAnswer: wvs <- read.table(wvs_url, header = T)
  AnswerTests: omnitest(correctExpr='wvs <- read.table(wvs_url, header = T)')
  Hint: Ok, two hints. The structure should be something along the lines of new_name <- function(url, arguments).
    If you don't remember which arguments to use, type ?read.table().
    
- Class: cmd_question
  Output: Check the first few rows of wvs with head()
  CorrectAnswer: head(wvs)
  AnswerTests: omnitest(correctExpr='head(wvs)')
  Hint: Type head(wvs)
    

- Class: cmd_question
  Output: Oh, looks like one column name is missing. We could change the name when reading the data.
    So repeat the expression we used to read the data and add the 'col.names' argument. For this argument
    specify all column names, plus a new name 'wdk' as a character vector.
  CorrectAnswer: wvs <- read.table(wvs_url, header = T, col.names = c("pov", "which_relig", "wdk"))
  AnswerTests: omnitest(correctExpr='wvs <- read.table(wvs_url, header = T, col.names = c("pov", "which_relig", "wdk"))', correctVal=VAL)
  Hint: The structure should be something along the lines of new_name <- function(url, arguments).
    Finally, the column names should be c(col1_name, ..., "wdk") replacing the
    corresponding variable names!
    
- Class: cmd_question
  Output: Type head(wvs)
  CorrectAnswer: head(wvs)
  AnswerTests: omnitest(correctExpr='head(wvs)')
  Hint: Type head(wvs)

- Class: text
  Output: Awesome! We have one dataset down. We need to repeat something similar with the wsv_semi_colon.

- Class: cmd_question
  Output: But this one you'll do it on your own! I'll give you some hints. First, first column
    is the row names, so ignore that! There's only 5 columns. Name the last two columns
    'wdk' and 'index'. Everything should be very similar to the last expression but with
    read.csv2(). Use the wsv2_url for the link and name it wvs_two.
  CorrectAnswer: wsv_two <- read.csv2(wvs2_url, header = T, col.names = c("degree", "country", "age", "wdk", "index"))
  AnswerTests: calculates_same_value('wsv_two <- read.csv2(wvs2_url, header = T, col.names = c("degree", "country", "age", "wdk", "index"))')
  Hint: Using read.csv2(), what's important here are the header argument and the col.names argument.
    The col.names argument should be have a character vector with all column names in the original data (
    go back to the url) plus the two names 'wdk' and 'index' for the last two columns (which don't have a name).

- Class: cmd_question
  Output: Don't worry if you get a lot of warning messages! Let's check if the data makes sense
    by typing head(wvs_two)
  CorrectAnswer: head(wvs_two)
  AnswerTests: omnitest(correctExpr='head(wvs_two)')
  Hint: Type head(wvs_two).
