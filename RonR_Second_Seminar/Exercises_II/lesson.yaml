- Class: meta
  Course: RonR_Second_Seminar
  Lesson: Exercises_II
  Author: your name goes here
  Type: Standard
  Organization: your organization's name goes here
  Version: 2.4.3

- Class: text
  Output: Welcome to the last exercise lesson! This lesson builds heavily on the previous
    exercise so if you haven't completed it, go back and do so, because
    otherwise you won't understand much of what we do.
    
- Class: cmd_question
  Output: We left off with the all_tests data. Can you have a look at the data using the head()
     function?
  CorrectAnswer: head(all_tests)
  AnswerTests: omnitest(correctExpr='head(all_tests)')
  Hint: Type head(all_tests)

- Class: text
  Output: Great, so in the previous exercise we created the passmath_failscience variable
    which simply states a TRUE when the student passed math and failed science. Up next,
    I want you to perform a different calculation.

- Class: mult_question
  Output: I want you to identify the best student. For that, I want you to add the math and science
    variables together and create a new variable. Which answer would do this?
  AnswerChoices: math_score + science_score; with(all_tests, math_score + science_score);
      all_tests[math_score] + all_tests[science_score]
  CorrectAnswer: with(all_tests, math_score + science_score)
  AnswerTests: omnitest(correctVal= 'with(all_tests, math_score + science_score)')
  Hint: with() allows you not to write the dataset in front of the variable names. It's like
    everything that happens inside with() gets searched in the dataset!

- Class: cmd_question
  Output: Extend the above code to save that variable with the name 'joint_score'
  CorrectAnswer: all_tests$joint_score <- with(all_tests, math_score + science_score)
  AnswerTests: omnitest(correctExpr='all_tests$joint_score <- with(all_tests, math_score + science_score)')
  Hint: your_data$new_var <- previous expression - should do the job!

- Class: text
  Output: The order() function gives you the new order of rows to subset. So, if we wrote
    with(all_tests, order(math_score)), we would get the new order of rows like 5, 8, 10, 1...
    so the row 5 is the best math score, 8 is second, and so on.

- Class: cmd_question
  Output: 'Following that idea, if you include the results of order in the row subsetting
    of all_tests, you subset the ordered rows of the data set. Using with() please type
    all_tests as the dataset and then subset the new order of joint_score similar to this: 
    with(data, data[order(our_var), ]). Remember to assign that expression to all_tests to save
    the results.'
  CorrectAnswer: all_tests <- with(all_tests, all_tests[order(joint_score), ])
  AnswerTests: omnitest(correctExpr='all_tests <- with(all_tests, all_tests[order(joint_score), ])')
  Hint: with(data, data[order(your_variable), ]), replace your data and variable names and save
    that to you data again.

- Class: cmd_question
  Output: Type all_tests. What's the name of the top scorer?
  CorrectAnswer: all_tests
  AnswerTests: omnitest(correctExpr='all_tests')
  Hint: Type your data set name.

- Class: cmd_question
  Output: Now that we have our ordered data set, I want you to create an ID variable
    that assigns an ID to each student. Do that by making a sequence from 1 to nrow(all_tests).
    Save that variable to all_tests with the name id_best.
  CorrectAnswer: all_tests$id_best <- 1:nrow(all_tests)
  AnswerTests: omnitest(correctExpr='all_tests$id_best <- 1:nrow(all_tests)')
  Hint: A sequence can be created like 1:nrow(mtcars). Assign that the name id_best in all_tests.
  
- Class: text
  Output: Remember that id 100 is the the best student and id 1 is the worst student!

- Class: cmd_question
  Output: Out of the top 50 students (based on id_best), what's the frequency of passing math
    and failing science? Use this structure and WRAP it in the table function;
    with(data, data[var > 50, your_var_in_quotes]).
  CorrectAnswer: table(with(all_tests, all_tests[id_best > 50, "passmath_failscience"])).
  AnswerTests: omnitest(correctExpr='table(with(all_tests, all_tests[id_best > 50, "passmath_failscience"]))')
  Hint: table(with(data, data[var > value, your_var_in_quotes])), that was a hard one!

- Class: text
  Output: That was some real data analysis there! So what are we doing? We take the all_tests
    data and, we're choosing only the rows where id_best is > 50 but we're using only the
    passmath_failscience column. The output is simply the vector of passmath_failscience
    that are above 50. By wrapping all of that in table() we get the frequencies. Good Job!

- Class: cmd_question
  Output: Results are coming in! It looks like all students just took their literacy test
    and we have it at our disposal right now. However, because it was on a such a short notice,
    we couldn't get it on a data frame. We have a 'named vector'. Type literacy_scores.
  CorrectAnswer: literacy_scores
  AnswerTests: omnitest(correctExpr='literacy_scores')
  Hint: Type literacy_scores
  
- Class: text
  Output: Great so the id is set as the name (id, not id_best) and the score as the contents.
    You can access the names using the names() function.

- Class: cmd_question
  Output: 'Now, create a data frame using the data.frame() function which has two columns:
    id and literacy_scores (give the columns these names as well).
    Inside the id column place the names of literacy_scores and
    in the other column the scores. Call that data frame literacy_tests.'
  CorrectAnswer: literacy_tests <- data.frame(id = names(literacy_scores), literacy_scores = literacy_scores)
  AnswerTests: omnitest(correctExpr='literacy_tests <- data.frame(id = names(literacy_scores), literacy_scores = literacy_scores)')
  Hint: Follow this structure new_dataset <- data.frame(col1 = names(var), col2 = var)

- Class: cmd_question
  Output: How many rows does literacy_tests have?
  CorrectAnswer: nrow(literacy_tests)
  AnswerTests: omnitest(correctExpr='nrow(literacy_tests)')
  Hint: Numer of rows ... nrow...

- Class: cmd_question
  Output: How many rows does all_tests have?
  CorrectAnswer: nrow(all_tests)
  AnswerTests: omnitest(correctExpr='nrow(all_tests)')
  Hint: Numer of rows ... nrow...
