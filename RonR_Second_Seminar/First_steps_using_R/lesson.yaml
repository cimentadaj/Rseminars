## things to keep in mind: all questions need to have the same spacing in the beginning -. all questions
## need to have only one space in case you cut the paragraph. All : need to be surrounded by " ".

- Class: meta
  Course: RonR! Second seminar
  Lesson: First steps using R
  Author: Jorge Cimentada
  Type: Standard
  Organization: RECSM UPF
  Version: 2.4.0

- Class: text
  Output: Welcome to the first session of learning R! Please note that in order
    for you to run this session successfully you'll need to be connected to the internet and be
    using Rstudio (https://www.rstudio.com/)

- Class: text
  Output: Throughout this lesson you'll learn about R structures,
    what are packages and how to install them and how Rstudio works. If you're ready, let's begin!

- Class: text
  Output: R is a programming language and environment that allows you to process data and apply
    statistical methods. But that is just the tip of the iceberg! As we'll try to show in these
    exercises, R has potential to do many other things. 

- Class: text
  Output: "R is also completely free and is maintained by a non-profit organization and the public
    community. If you want to learn more about how R works, visit their website
    https://www.r-project.org/"

- Class: text
  Output: First things first, you should know what a function is. A function is just a command.
    For example mean() and median() are functions. As both function's names reveal, they simply
    calculate the mean and median of a set of numbers. Got that?

- Class: text
  Output: Some of these functions come pre-installed in R but most others don't. These other
    functions are in things called packages. To put it simply, packages are a collection of
    functions that community users have created. Remember the mean() and median() functions?
    R already has these functions built into the program.  But many users have developed
    additional functions that are at your disposal.

- Class: text
  Output: At this point (22/January/2017), R has over 6000 contributed packages. But don't
      get overwhelmed, we will only use a handful.

- Class: cmd_question
  Output: Let's install and load a package. You install packages with the built-in function
    install.packages(). As you might've imaginged, the function installs the package
    specified within the parenthesis. Write down install.packages("car")
  CorrectAnswer: install.packages("car")
  AnswerTests: omnitest(correctExpr='install.packages("car")')
  Hint: Type install.packages("car")

- Class: cmd_question
  Output: "Did you see all those red characters? You just installed a package named car!
    How do you load it? Type library(car)"
  CorrectAnswer: library(car)
  AnswerTests: omnitest(correctExpr='library(car)')
  Hint: Type library(car)

- Class: text
  Output: You now have a loaded package at your disposal. This means that you can use
    any function that comes with the package. If you downloaded the package but didn't load it
    you wouldn't be able to access it's functions. If you want to see the description of a package
    or any of its functions you can search on Google and you'll find it easily(for example; car
    package) 

- Class: text
  Output: Aside from functions, a package can contain datasets as well. These datasets are often
    included in the package because many of the package examples are done using these datasets.
    We can access the data and play with it. The package you just installed contains a dataset
    named Freedman which has data on U.S metropolitan areas with 1968 populations of 250,000
    or more.

- Class: cmd_question
  Output: Type Freedman in the console
  CorrectAnswer: Freedman
  AnswerTests: omnitest(correctExpr='Freedman')
  Hint: Type Freedman
  
- Class: cmd_question
  Output: You can see the data physically in the console. If you want the specific description of a
    function or dataset, simply type ?function_name or ?dataset. Type ?Freedman
  CorrectAnswer: ?Freedman
  AnswerTests: omnitest(correctExpr='?Freedman')
  Hint: Type ?Freedman
  
- Class: text
  Output: See the description of the data on your bottom-left panel?

- Class: text
  Output: Let's move to another topic. You're probably a bit familiar with
    Rstudio now but let's explain its environment in more detail.

- Class: cmd_question
  Output: The window where you have been typing commands is called the console.
    This is an interactive window, which means that every time you enter a
    command, you will get a result. Type 5 + 5.
  CorrectAnswer: 10
  AnswerTests: omnitest(correctExpr='5 + 5')
  Hint: Type 5 + 5
  
- Class: exact_question
  Output: Now add 10 to the 5 + 5 and subtract 15.
  CorrectAnswer: 5
  AnswerTests: omnitest(correctVal=5)
  Hint: Take the initial 5 + 5, add 10 and subtract 15.

- Class: text
  Output: You normally use the console for data exploration
    and experimental analysis. The window above the console
    is the code editor. Here you can write as much code as you want
    and save it as you go along. The data process is normally like this;
    you experiment with functions in your console and when you find
    interesting results you write down the code in the code editor.
    This is very handy because you can save that code into a file and
    reproduce what you did.
 
- Class: cmd_question
  Output: You can also run code from the code editor. Type Freedman in the code
    editor (the window above the console), highlight the code line and click 'Run'
    (in the upper right corner of the code editor window).
  CorrectAnswer: Freedman
  AnswerTests: omnitest(correctExpr='Freedman')
  Hint: Type Freedman in the code editor, highligh it and click Run or CTRL + ENTER

- Class: text
  Output: You see? It's the same as running it in the console. The only difference is that
    with the code editor you keep a physical record of what you've done.

- Class: text
  Output: The window in the upper right corner shows the datasets and vectors you have
    currently "opened". (I know you probably don't know what vectors are, but think of
    them as variables for now). Let's see two examples.

- Class: cmd_question
  Output: Note that the window is empty. Assign the dataset Freedman to a new name "Freedman2".
    Type Freedman2 <- Freedman
  CorrectAnswer: Freedman2 <- Freedman
  AnswerTests: omnitest(correctExpr='Freedman2 <- Freedman')
  Hint: Type Freedman2 <- Freedman
  
- Class: text
  Output:  What do you see? You have a dataset named Freedman2 which has 180 rows and 4 variables.
    Don't worry if you don't understand the "assignment" part, this example is just to show you how
    R works.
 
- Class: cmd_question
  Output: Now, let's imagine you want to create a vector (think of variable) that specifies the
    number one for the first two subjects and the number zero for the next two subjects(let's suppose
    1 means male and 0 female). Type gender <- c(1, 1, 0, 0)
  CorrectAnswer: Type gender <- c(1, 1, 0, 0)
  AnswerTests: omnitest(correctExpr='gender <- c(1, 1, 0, 0)')
  Hint: Type gender <- c(1, 1, 0, 0). Be careful with the spaces!
  
- Class: text
  Output:  What do you see? You now have a NUMERIC variable named "gender" which has 4 observations.
    As you'd expect, you can see it in the upper-left window.

- Class: text
  Output:  Lastly, the bottom-right window, where you already saw the description of the dataset Freedman,
    is where you can see your graphs, help files, installed packages and the existing files in your
    working directory (don't worry if you don't know what that that is, you'll know soon enough)
    Feel free to explore these windows!

- Class: text
  Output:  This is the end of the first lesson.
    Thanks for participating and continue
    on to the next one!
